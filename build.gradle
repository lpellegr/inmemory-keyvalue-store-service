buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE"
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.5.0"
    id "eclipse"
    id "idea"
    id "jacoco"
    id "java"
    id "maven"
    id "war"
    id "org.sonarqube" version "1.2"
}

apply plugin: "spring-boot"

group = "org.ow2.proactive"

bootRepackage {
    enabled = true
}

configurations {
    // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
    all*.exclude module: "spring-boot-starter-logging"

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

ext {
    generatedSrcDir = "$projectDir/src/generated/java"
}

repositories {
//    if (project.hasProperty("local")) {
        mavenLocal()
//    }

    jcenter()
    maven { url 'http://repository.activeeon.com/content/groups/proactive/' }

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty("nexusUsername")}",
                            password: "${System.getProperty("nexusPassword")}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty("nexusUsername")}",
                            password: "${System.getProperty("nexusPassword")}")
                }
            }
        }
    }
}

sourceSets {
    generated {
        java {
            srcDirs += generatedSrcDir
        }
    }

    main {
        java {
            srcDirs += generatedSrcDir
        }
    }

    integrationTest {
        java.srcDir file("src/integration-test/java")
        resources.srcDir file("src/integration-test/resources")

        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

springBoot {
    mainClass = "org.ow2.proactive.inmemory_keyvalue_store.Application"
}

war {
    baseName = projectName
    version = version
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-log4j2:1.4.0.RELEASE"
    compile("org.springframework.boot:spring-boot-starter-web:1.4.0.RELEASE") {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "spring-boot-starter-validation"
    }
    compile "org.springframework.hateoas:spring-hateoas:0.21.0.RELEASE"

    compile "org.apache.logging.log4j:log4j-web:2.6.2"

    providedCompile "org.ow2.proactive:inmemory-keyvalue-store-addons:${version}"
    providedCompile "org.ow2.proactive:scheduler-api:${version}"
    providedCompile "org.springframework.boot:spring-boot-starter-tomcat:1.4.0.RELEASE"

    compile 'io.springfox:springfox-spring-web:2.5.0'
    compile 'io.springfox:springfox-swagger2:2.5.0'
    compile 'io.springfox:springfox-swagger-ui:2.5.0'
}

test {
    apply plugin: "org.sonarqube"
    apply plugin: "jacoco"

    sonarqube {
        properties {
            property "sonar.projectName", projectName
            property "sonar.projectKey", "$project.group:$projectName"
            property "sonar.sources", "src/main/java"
            property "sonar.jacoco.reportPath", "${buildDir}/jacoco/testDebug.exec"
            property "sonar.junit.reportsPath", "${buildDir}/test-results"
        }
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    executionData test, integrationTest

    sourceSets project.sourceSets.main

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

clean {
    sourceSets.generated.java.srcDirs.each {
       srcDir -> delete srcDir
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.14.1"
}

check.dependsOn integrationTest

jacocoTestReport.dependsOn check
tasks.coveralls.dependsOn jacocoTestReport

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        testSourceDirs += file("src/integration-test/java")
        testSourceDirs += file("src/integration-test/resources")

        scopes.TEST.plus += [
                configurations.integrationTestCompile,
                configurations.integrationTestRuntime
        ]
    }
}
